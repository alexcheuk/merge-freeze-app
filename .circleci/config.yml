version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.5.0
  aws-eks: circleci/aws-eks@0.2.3
  aws-cli: circleci/aws-cli@0.1.18
  version-tag: commitdev/version-tag@0.0.3
  kubernetes: circleci/kubernetes@0.11.0

variables:
  - &workspace /home/circleci/project

restore_yarn_cache: &restore_yarn_cache
  restore_cache:
    keys:
      - monorepo-v2-dependency-cache-{{ checksum "yarn.lock" }}
      - monorepo-v2-dependency-cache-

aliases:
  # Shallow Clone - this allows us to cut the 2 minute repo clone of "procurifydevelopment" down to about 10 seconds
  - &checkout-shallow
    name: Checkout (Shallow)
    command: |
      #!/bin/sh
      set -e

      # Workaround old docker images with incorrect $HOME
      # check https://github.com/docker/docker/issues/2968 for details
      if [ "${HOME}" = "/" ]
      then
        export HOME=$(getent passwd $(id -un) | cut -d: -f6)
      fi

      mkdir -p ~/.ssh

      echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
      bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==' >> ~/.ssh/known_hosts

      (umask 077; touch ~/.ssh/id_rsa)
      chmod 0600 ~/.ssh/id_rsa
      (cat \<<EOF > ~/.ssh/id_rsa
      $CHECKOUT_KEY
      EOF
      )

      # use git+ssh instead of https
      git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true

      if [ -e /home/circleci/project/.git ]
      then
          cd /home/circleci/project
          git remote set-url origin "$CIRCLE_REPOSITORY_URL" || true
      else
          mkdir -p /home/circleci/project
          cd /home/circleci/project
          git clone --depth=1 "$CIRCLE_REPOSITORY_URL" .
      fi

      if [ -n "$CIRCLE_TAG" ]
      then
        git fetch --depth=10 --force origin "refs/tags/${CIRCLE_TAG}"
      elif [[ "$CIRCLE_BRANCH" =~ ^pull\/* ]]
      then
      # For PR from Fork
        git fetch --depth=10 --force origin "$CIRCLE_BRANCH/head:remotes/origin/$CIRCLE_BRANCH"
      else
        git fetch --depth=10 --force origin "$CIRCLE_BRANCH:remotes/origin/$CIRCLE_BRANCH"
      fi

      if [ -n "$CIRCLE_TAG" ]
      then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q "$CIRCLE_TAG"
      elif [ -n "$CIRCLE_BRANCH" ]
      then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q -B "$CIRCLE_BRANCH"
      fi

      git reset --hard "$CIRCLE_SHA1"
      pwd

  - &assume-role
      name: Assume role
      command: |
        RESULT=$(aws sts assume-role --role-arn << parameters.cluster-authentication-role-arn >> --role-session-name deploy)
        aws configure set aws_access_key_id "$(echo $RESULT | jq -r .Credentials.AccessKeyId)" --profile assumed-role
        aws configure set aws_secret_access_key "$(echo $RESULT | jq -r .Credentials.SecretAccessKey)" --profile assumed-role
        aws configure set aws_session_token "$(echo $RESULT | jq -r .Credentials.SessionToken)" --profile assumed-role

  - &install-binaries
      name: Install Binaries
      command: |
        KUSTOMIZE_VERSION=3.5.4
        IAM_AUTH_VERSION=0.5.0
        curl -L -o ./kustomize.tar.gz "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz"
        sudo tar xvzf ./kustomize.tar.gz -C /usr/local/bin/
        sudo chmod +x /usr/local/bin/kustomize
        kustomize version
        curl -L -o ./aws-iam-authenticator "https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v${IAM_AUTH_VERSION}/aws-iam-authenticator_${IAM_AUTH_VERSION}_linux_amd64"
        sudo mv ./aws-iam-authenticator /usr/local/bin/
        sudo chmod +x /usr/local/bin/aws-iam-authenticator

  - &run_yarn
      name: Install Packages
      command: yarn --frozen-lockfile


jobs:
  build_and_push:
    docker:
      - image: circleci/node:12
    working_directory: *workspace
    steps:
      - attach_workspace:
          at: *workspace
      - run: *checkout-shallow
      - version-tag/create:
          workspace: *workspace
      - aws-cli/install
      - aws-cli/setup
      - setup_remote_docker
      - aws-ecr/ecr-login-for-secondary-account:
          account-id: AWS_ECR_REPO_ACCOUNT_ID
          region: AWS_DEFAULT_REGION
      - aws-ecr/build-image:
          account-url: AWS_PRODUCTION_ACCOUNT_URL
          repo: merge-freeze
          tag: $VERSION_TAG,latest
      - aws-ecr/push-image:
          account-url: AWS_PRODUCTION_ACCOUNT_URL
          repo: merge-freeze
          tag: $VERSION_TAG,latest
            
  kubernetes_deployment:
    executor: aws-eks/python3
    parameters:
      namespace:
        type: string
        default: ''
        description: |
          The kubernetes namespace that should be used.
      tag:
        type: string
        default: $VERSION_TAG
        description: |
          The tag that should be deployed.
      region:
        type: string
        default: ''
        description: |
          The region to use for AWS operations.
      service-name:
        type: string
        default: ''
        description: | 
          Name of the service to be deployed.
      cluster-name:
        description: |
          The name of the EKS cluster.
        type: string
      cluster-authentication-role-arn:
        default: ''
        description: |
          To assume a role for cluster authentication, specify an IAM role ARN with
          this option. For example, if you created a cluster while assuming an IAM
          role, then you must also assume that role to connect to the cluster the
          first time.
        type: string
    steps:
      - checkout
      - version-tag/get
      - aws-cli/install
      - aws-cli/setup
      - run: *assume-role
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          authenticator-release-tag: v0.5.1
          cluster-name: << parameters.cluster-name >>
          cluster-authentication-role-arn: << parameters.cluster-authentication-role-arn >>
          aws-region: << parameters.region >>
          install-kubectl: false
          aws-profile: assumed-role
      - run: 
          name: Create namespace for merge-freeze
          command: |
            kubectl create namespace merge-freeze || echo "Namespace already exists"
      - run:
          name: kubernetes update image and resources
          command: |
            cd kubernetes
            sed -i "s/fake-img-tag/${VERSION_TAG}/g" merge-freeze.yaml
            kubectl apply -f . -n << parameters.namespace >>



################################
## Main Workflow
################################

workflows:
    version: 2

    build_and_deploy:
      jobs:        
        - build_and_push:
            context: production
            filters:
              branches:
                only:
                  - /^master$/
                  - /^k8s-migration$/
        - kubernetes_deployment:
            context: production
            name: production_deployment
            namespace: "merge-freeze"
            cluster-name: "production"
            cluster-authentication-role-arn: "arn:aws:iam::146043269776:role/kubernetes-admin-production"
            region: "${AWS_DEFAULT_REGION}"
            requires:
              - build_and_push
